!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ForProgress=e():t.ForProgress=e()}(this,(function(){return(()=>{"use strict";var t={476:(t,e,r)=>{r.r(e),r.d(e,{default:()=>a});var n=r(81),s=r.n(n),i=r(645),o=r.n(i)()(s());o.push([t.id,"div.forProgressContainer{position:fixed;top:0;left:0;width:100%;z-index:999999999;transition:opacity 500ms 250ms}div.forProgressContainer div.bar{transition:transform 250ms cubic-bezier(0.25, 1, 0.5, 1);transform:translate3d(-100%, 0px, 0px);position:relative;width:100%}div.forProgressContainer div.bar div.tip{height:100%;width:95px;position:absolute;right:0;transform:rotate(4deg) translate3d(0px, -3px, 0px);filter:blur(5px)}div.forProgressContainer div.spinner{border:2px solid #e1e1e1;border-radius:50%;position:absolute;right:15px;top:15px}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.disableTransitionForProgress{transition:none !important}",""]);const a=o.toString()},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,s,i){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(n)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(o[c]=!0)}for(var u=0;u<t.length;u++){var d=[].concat(t[u]);n&&o[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),s&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=s):d[4]="".concat(s)),e.push(d))}},e}},81:t=>{t.exports=function(t){return t[1]}},450:function(t,e,r){const n=(this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}})(r(476));t.exports=class{constructor(t={}){this.settings={color:"red",backgroundColor:"transparent",autoIncrementEnabled:!0,autoIncrementSpeed:100,autoIncrementMaxPercent:1,autoIncrementInitialPercent:20,height:3,appendTo:"body",useCustomCss:!1,spinnerEnabled:!0,spinnerColor:"grey",spinnerSize:20,spinnerSpeed:750},this.updateSettings(t),this.appendCss(),this.colorArray=this.getcolorArray(),this.currentPercent=0,this.currentAutoIncrementInterval=!1,this.isRunning=!1,this.autoIncrementIsPaused=!1}start(){this.reset();const{forProgressContainer:t,bar:e}=this.appendForProgressElements();return t.classList.add("disableTransitionForProgress"),e.classList.add("disableTransitionForProgress"),this.setPercent(0),t.style.opacity="1",t.offsetHeight,t.classList.remove("disableTransitionForProgress"),e.classList.remove("disableTransitionForProgress"),this.startIncrement(),this}setPercent(t){return this.isRunning||this.start(),t<0||t>100||this.changeBarProgress(t),this}addPercent(t){this.isRunning||this.start();let e=this.currentPercent+t;return e>100&&(e=100),e<0&&(e=0),this.changeBarProgress(e),this}getPercent(){return this.currentPercent}done(){const t=document.querySelector("div.forProgressContainer");return this.isRunning&&t?(this.clearCurrentAutoIncrementInterval(),this.setPercent(100),t.style.opacity="0",this.isRunning=!1,t.addEventListener("transitionend",(function e(r){if(t&&"forProgressContainer"===r.target.className)try{t.remove(),t.removeEventListener("transitionend",e)}catch(t){}})),this):this}pause(){return this.autoIncrementIsPaused=!0,this}resume(){return this.autoIncrementIsPaused=!1,this}reset(){this.clearCurrentAutoIncrementInterval(),this.isRunning=!0,this.currentAutoIncrementInterval=!1,this.autoIncrementIsPaused=!this.settings.autoIncrementEnabled}changeBarProgress(t){const e=document.querySelector("div.forProgressContainer div.bar");if(!e)return;const r=-100+t;e.style.transform=`translate3d(${r}%, 0px, 0px)`,this.currentPercent=t}createForProgressContainer(){const t=this.createElementWithClassName("div","forProgressContainer"),e=this.createElementWithClassName("div","bar"),r=this.createElementWithClassName("div","tip"),n=this.createElementWithClassName("div","spinner");return this.settings.useCustomCss||(t.style.background=this.settings.backgroundColor,e.style.background=this.gradientGenerator(),e.style.height=`${this.settings.height}px`,r.style.background=this.colorArray[this.colorArray.length-1],n.style.borderTop=`2px solid ${this.settings.spinnerColor}`,n.style.height=`${this.settings.spinnerSize}px`,n.style.width=`${this.settings.spinnerSize}px`,n.style.animation=`spin ${this.settings.spinnerSpeed}ms linear infinite`),e.append(r),t.append(e),this.settings.spinnerEnabled&&t.append(n),t}gradientGenerator(){return`linear-gradient(95deg, ${this.colorArray.map(((t,e)=>`${t} ${(100/(this.colorArray.length-1)*e).toFixed(2)}%`)).join(", ")})`}getcolorArray(){const t=this.settings.color;return"string"==typeof t?[t,t]:1===t.length?[t[0],t[0]]:t}appendForProgressElements(){let t=document.querySelector("div.forProgressContainer");t&&t.remove(),t=this.createForProgressContainer();const e=document.querySelector(this.settings.appendTo);if(!e)throw`Cannot append to '${this.settings.appendTo}' as it does not exist in document`;e.append(t);const r=t.querySelector("div.bar");return{forProgressContainer:t,bar:r}}startIncrement(){0!==this.currentPercent||this.autoIncrementIsPaused||this.setPercent(this.settings.autoIncrementInitialPercent),this.currentAutoIncrementInterval=setInterval((()=>{if(this.autoIncrementIsPaused)return;if(0===this.currentPercent&&0!==this.settings.autoIncrementInitialPercent)return void this.setPercent(this.settings.autoIncrementInitialPercent);const t=this.currentPercent+this.getRandomPercent();t<=99.5&&this.setPercent(t)}),this.settings.autoIncrementSpeed)}getRandomPercent(){return parseFloat((Math.random()*(.1-this.settings.autoIncrementMaxPercent)+this.settings.autoIncrementMaxPercent).toFixed(2))}updateSettings(t){for(const[e,r]of Object.entries(t))this.settings[e]=r}clearCurrentAutoIncrementInterval(){"number"==typeof this.currentAutoIncrementInterval&&clearInterval(this.currentAutoIncrementInterval)}appendCss(){if(this.settings.useCustomCss)return;const t=document.createElement("style");t.textContent=n.default,document.head.append(t)}createElementWithClassName(t,e){const r=document.createElement(t);return r.className=e,r}}}},e={};function r(n){var s=e[n];if(void 0!==s)return s.exports;var i=e[n]={id:n,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}return r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r(450)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,